
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_OP DO DONE ECHO ELSE EQ_CMP FI FLOAT GET_VARIABLE HEADER IF INT LT_CMP MUL_OP NE_CMP SET_VARIABLE STRING THEN WHILE newline programme : statement newline  programme : statement newline programme  statement : affectation  affectation : SET_VARIABLE '=' expression  statement : ECHO expression  expression : GET_VARIABLE  expression : FLOAT\n        | INT\n        | STRING  expression : '$' '(' '(' expression ADD_OP expression ')' ')'\n                    | '$' '(' '(' expression MUL_OP expression ')' ')'  expression : expression EQ_CMP expression\n                    | expression NE_CMP expression\n                    | expression LT_CMP expression  block : statement newline  block : statement newline block  statement : IF '[' expression ']' newline THEN newline block FI  statement : IF '[' expression ']' newline THEN newline block ELSE newline block FI  statement : WHILE '[' expression ']' ';' DO newline block DONE "
    
_lr_action_items = {'ECHO':([0,8,41,42,52,54,],[4,4,4,4,4,4,]),'IF':([0,8,41,42,52,54,],[5,5,5,5,5,5,]),'WHILE':([0,8,41,42,52,54,],[6,6,6,6,6,6,]),'SET_VARIABLE':([0,8,41,42,52,54,],[7,7,7,7,7,7,]),'$end':([1,8,18,],[0,-1,-2,]),'newline':([2,3,9,10,11,12,13,25,26,27,28,30,37,38,46,48,49,50,51,53,57,],[8,-3,-5,-6,-7,-8,-9,-4,-12,-13,-14,33,41,42,52,-10,-11,-17,54,-19,-18,]),'GET_VARIABLE':([4,15,16,17,19,20,21,29,35,36,],[10,10,10,10,10,10,10,10,10,10,]),'FLOAT':([4,15,16,17,19,20,21,29,35,36,],[11,11,11,11,11,11,11,11,11,11,]),'INT':([4,15,16,17,19,20,21,29,35,36,],[12,12,12,12,12,12,12,12,12,12,]),'STRING':([4,15,16,17,19,20,21,29,35,36,],[13,13,13,13,13,13,13,13,13,13,]),'$':([4,15,16,17,19,20,21,29,35,36,],[14,14,14,14,14,14,14,14,14,14,]),'[':([5,6,],[15,16,]),'=':([7,],[17,]),'EQ_CMP':([9,10,11,12,13,23,24,25,26,27,28,32,39,40,48,49,],[19,-6,-7,-8,-9,19,19,19,19,19,19,19,19,19,-10,-11,]),'NE_CMP':([9,10,11,12,13,23,24,25,26,27,28,32,39,40,48,49,],[20,-6,-7,-8,-9,20,20,20,20,20,20,20,20,20,-10,-11,]),'LT_CMP':([9,10,11,12,13,23,24,25,26,27,28,32,39,40,48,49,],[21,-6,-7,-8,-9,21,21,21,21,21,21,21,21,21,-10,-11,]),']':([10,11,12,13,23,24,26,27,28,48,49,],[-6,-7,-8,-9,30,31,-12,-13,-14,-10,-11,]),'ADD_OP':([10,11,12,13,26,27,28,32,48,49,],[-6,-7,-8,-9,-12,-13,-14,35,-10,-11,]),'MUL_OP':([10,11,12,13,26,27,28,32,48,49,],[-6,-7,-8,-9,-12,-13,-14,36,-10,-11,]),')':([10,11,12,13,26,27,28,39,40,43,44,48,49,],[-6,-7,-8,-9,-12,-13,-14,43,44,48,49,-10,-11,]),'(':([14,22,],[22,29,]),';':([31,],[34,]),'THEN':([33,],[37,]),'DO':([34,],[38,]),'FI':([45,52,55,56,],[50,-15,-16,57,]),'ELSE':([45,52,55,],[51,-15,-16,]),'DONE':([47,52,55,],[53,-15,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,8,],[1,18,]),'statement':([0,8,41,42,52,54,],[2,2,46,46,46,46,]),'affectation':([0,8,41,42,52,54,],[3,3,3,3,3,3,]),'expression':([4,15,16,17,19,20,21,29,35,36,],[9,23,24,25,26,27,28,32,39,40,]),'block':([41,42,52,54,],[45,47,55,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement newline','programme',2,'p_programme_statement','parser_bash.py',15),
  ('programme -> statement newline programme','programme',3,'p_programme_recursive','parser_bash.py',20),
  ('statement -> affectation','statement',1,'p_statement','parser_bash.py',25),
  ('affectation -> SET_VARIABLE = expression','affectation',3,'p_statement_affectation','parser_bash.py',30),
  ('statement -> ECHO expression','statement',2,'p_echo','parser_bash.py',35),
  ('expression -> GET_VARIABLE','expression',1,'p_expression_var','parser_bash.py',40),
  ('expression -> FLOAT','expression',1,'p_expression_val','parser_bash.py',45),
  ('expression -> INT','expression',1,'p_expression_val','parser_bash.py',46),
  ('expression -> STRING','expression',1,'p_expression_val','parser_bash.py',47),
  ('expression -> $ ( ( expression ADD_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',57),
  ('expression -> $ ( ( expression MUL_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',58),
  ('expression -> expression EQ_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',63),
  ('expression -> expression NE_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',64),
  ('expression -> expression LT_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',65),
  ('block -> statement newline','block',2,'p_block','parser_bash.py',70),
  ('block -> statement newline block','block',3,'p_block_recurssive','parser_bash.py',74),
  ('statement -> IF [ expression ] newline THEN newline block FI','statement',9,'p_condition_if','parser_bash.py',79),
  ('statement -> IF [ expression ] newline THEN newline block ELSE newline block FI','statement',12,'p_condition_if_else','parser_bash.py',84),
  ('statement -> WHILE [ expression ] ; DO newline block DONE','statement',9,'p_while','parser_bash.py',88),
]
