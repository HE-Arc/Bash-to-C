
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_OP ECHO FLOAT GET_VARIABLE HEADER INT MUL_OP SET_VARIABLE STRING newline programme : statement newline  programme : statement newline programme  statement : affectation  affectation : SET_VARIABLE '=' expression  statement : ECHO expression  expression : GET_VARIABLE  expression : FLOAT\n        | INT\n        | STRING  expression : '$' '(' '(' expression ADD_OP expression ')' ')'\n                    | '$' '(' '(' expression MUL_OP expression ')' ')' "
    
_lr_action_items = {'ECHO':([0,6,],[4,4,]),'SET_VARIABLE':([0,6,],[5,5,]),'$end':([1,6,14,],[0,-1,-2,]),'newline':([2,3,7,8,9,10,11,16,25,26,],[6,-3,-5,-6,-7,-8,-9,-4,-10,-11,]),'GET_VARIABLE':([4,13,17,19,20,],[8,8,8,8,8,]),'FLOAT':([4,13,17,19,20,],[9,9,9,9,9,]),'INT':([4,13,17,19,20,],[10,10,10,10,10,]),'STRING':([4,13,17,19,20,],[11,11,11,11,11,]),'$':([4,13,17,19,20,],[12,12,12,12,12,]),'=':([5,],[13,]),'ADD_OP':([8,9,10,11,18,25,26,],[-6,-7,-8,-9,19,-10,-11,]),'MUL_OP':([8,9,10,11,18,25,26,],[-6,-7,-8,-9,20,-10,-11,]),')':([8,9,10,11,21,22,23,24,25,26,],[-6,-7,-8,-9,23,24,25,26,-10,-11,]),'(':([12,15,],[15,17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,6,],[1,14,]),'statement':([0,6,],[2,2,]),'affectation':([0,6,],[3,3,]),'expression':([4,13,17,19,20,],[7,16,18,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement newline','programme',2,'p_programme_statement','parser_bash.py',13),
  ('programme -> statement newline programme','programme',3,'p_programme_recursive','parser_bash.py',18),
  ('statement -> affectation','statement',1,'p_statement','parser_bash.py',23),
  ('affectation -> SET_VARIABLE = expression','affectation',3,'p_statement_affectation','parser_bash.py',28),
  ('statement -> ECHO expression','statement',2,'p_echo','parser_bash.py',33),
  ('expression -> GET_VARIABLE','expression',1,'p_expression_var','parser_bash.py',38),
  ('expression -> FLOAT','expression',1,'p_expression_val','parser_bash.py',43),
  ('expression -> INT','expression',1,'p_expression_val','parser_bash.py',44),
  ('expression -> STRING','expression',1,'p_expression_val','parser_bash.py',45),
  ('expression -> $ ( ( expression ADD_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',55),
  ('expression -> $ ( ( expression MUL_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',56),
]
