
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_OP DO DONE ECHO ELSE EQ_CMP FI FLOAT GET_VARIABLE HEADER IF INT LT_CMP MUL_OP NE_CMP SET_VARIABLE STRING THEN UNTIL WHILE newline programme : HEADER newline statement newline \n        | statement newline programme : HEADER newline statement newline programme \n        | statement newline programme  statement : affectation  affectation : SET_VARIABLE '=' expression  statement : ECHO expression  expression : GET_VARIABLE  expression : FLOAT\n        | INT\n        | STRING  expression : '$' '(' '(' expression ADD_OP expression ')' ')'\n                    | '$' '(' '(' expression MUL_OP expression ')' ')'  expression : expression EQ_CMP expression\n                    | expression NE_CMP expression\n                    | expression LT_CMP expression  block : statement newline  block : statement newline block  statement : IF '[' expression ']' newline THEN newline block FI  statement : IF '[' expression ']' newline THEN newline block ELSE newline block FI  statement : WHILE '[' expression ']' ';' DO newline block DONE  statement : UNTIL '[' expression ']' ';' DO newline block DONE "
    
_lr_action_items = {'HEADER':([0,11,32,],[2,2,2,]),'ECHO':([0,10,11,32,52,53,54,65,68,],[5,5,5,5,5,5,5,5,5,]),'IF':([0,10,11,32,52,53,54,65,68,],[6,6,6,6,6,6,6,6,6,]),'WHILE':([0,10,11,32,52,53,54,65,68,],[7,7,7,7,7,7,7,7,7,]),'UNTIL':([0,10,11,32,52,53,54,65,68,],[8,8,8,8,8,8,8,8,8,]),'SET_VARIABLE':([0,10,11,32,52,53,54,65,68,],[9,9,9,9,9,9,9,9,9,]),'$end':([1,11,23,32,40,],[0,-2,-4,-1,-3,]),'newline':([2,3,4,12,13,14,15,16,22,31,33,34,35,37,47,48,49,58,61,62,63,64,66,67,71,],[10,11,-5,-7,-8,-9,-10,-11,32,-6,-14,-15,-16,42,52,53,54,65,-12,-13,-19,68,-21,-22,-20,]),'GET_VARIABLE':([5,18,19,20,21,24,25,26,36,45,46,],[13,13,13,13,13,13,13,13,13,13,13,]),'FLOAT':([5,18,19,20,21,24,25,26,36,45,46,],[14,14,14,14,14,14,14,14,14,14,14,]),'INT':([5,18,19,20,21,24,25,26,36,45,46,],[15,15,15,15,15,15,15,15,15,15,15,]),'STRING':([5,18,19,20,21,24,25,26,36,45,46,],[16,16,16,16,16,16,16,16,16,16,16,]),'$':([5,18,19,20,21,24,25,26,36,45,46,],[17,17,17,17,17,17,17,17,17,17,17,]),'[':([6,7,8,],[18,19,20,]),'=':([9,],[21,]),'EQ_CMP':([12,13,14,15,16,28,29,30,31,33,34,35,41,50,51,61,62,],[24,-8,-9,-10,-11,24,24,24,24,24,24,24,24,24,24,-12,-13,]),'NE_CMP':([12,13,14,15,16,28,29,30,31,33,34,35,41,50,51,61,62,],[25,-8,-9,-10,-11,25,25,25,25,25,25,25,25,25,25,-12,-13,]),'LT_CMP':([12,13,14,15,16,28,29,30,31,33,34,35,41,50,51,61,62,],[26,-8,-9,-10,-11,26,26,26,26,26,26,26,26,26,26,-12,-13,]),']':([13,14,15,16,28,29,30,33,34,35,61,62,],[-8,-9,-10,-11,37,38,39,-14,-15,-16,-12,-13,]),'ADD_OP':([13,14,15,16,33,34,35,41,61,62,],[-8,-9,-10,-11,-14,-15,-16,45,-12,-13,]),'MUL_OP':([13,14,15,16,33,34,35,41,61,62,],[-8,-9,-10,-11,-14,-15,-16,46,-12,-13,]),')':([13,14,15,16,33,34,35,50,51,55,56,61,62,],[-8,-9,-10,-11,-14,-15,-16,55,56,61,62,-12,-13,]),'(':([17,27,],[27,36,]),';':([38,39,],[43,44,]),'THEN':([42,],[47,]),'DO':([43,44,],[48,49,]),'FI':([57,65,69,70,],[63,-17,-18,71,]),'ELSE':([57,65,69,],[64,-17,-18,]),'DONE':([59,60,65,69,],[66,67,-17,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,11,32,],[1,23,40,]),'statement':([0,10,11,32,52,53,54,65,68,],[3,22,3,3,58,58,58,58,58,]),'affectation':([0,10,11,32,52,53,54,65,68,],[4,4,4,4,4,4,4,4,4,]),'expression':([5,18,19,20,21,24,25,26,36,45,46,],[12,28,29,30,31,33,34,35,41,50,51,]),'block':([52,53,54,65,68,],[57,59,60,69,70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> HEADER newline statement newline','programme',4,'p_programme_statement','parser_bash.py',15),
  ('programme -> statement newline','programme',2,'p_programme_statement','parser_bash.py',16),
  ('programme -> HEADER newline statement newline programme','programme',5,'p_programme_recursive','parser_bash.py',26),
  ('programme -> statement newline programme','programme',3,'p_programme_recursive','parser_bash.py',27),
  ('statement -> affectation','statement',1,'p_statement','parser_bash.py',37),
  ('affectation -> SET_VARIABLE = expression','affectation',3,'p_statement_affectation','parser_bash.py',42),
  ('statement -> ECHO expression','statement',2,'p_echo','parser_bash.py',47),
  ('expression -> GET_VARIABLE','expression',1,'p_expression_var','parser_bash.py',52),
  ('expression -> FLOAT','expression',1,'p_expression_val','parser_bash.py',57),
  ('expression -> INT','expression',1,'p_expression_val','parser_bash.py',58),
  ('expression -> STRING','expression',1,'p_expression_val','parser_bash.py',59),
  ('expression -> $ ( ( expression ADD_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',69),
  ('expression -> $ ( ( expression MUL_OP expression ) )','expression',8,'p_expression_op','parser_bash.py',70),
  ('expression -> expression EQ_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',75),
  ('expression -> expression NE_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',76),
  ('expression -> expression LT_CMP expression','expression',3,'p_expression_cmp','parser_bash.py',77),
  ('block -> statement newline','block',2,'p_block','parser_bash.py',82),
  ('block -> statement newline block','block',3,'p_block_recurssive','parser_bash.py',86),
  ('statement -> IF [ expression ] newline THEN newline block FI','statement',9,'p_condition_if','parser_bash.py',91),
  ('statement -> IF [ expression ] newline THEN newline block ELSE newline block FI','statement',12,'p_condition_if_else','parser_bash.py',96),
  ('statement -> WHILE [ expression ] ; DO newline block DONE','statement',9,'p_while','parser_bash.py',100),
  ('statement -> UNTIL [ expression ] ; DO newline block DONE','statement',9,'p_until','parser_bash.py',104),
]
