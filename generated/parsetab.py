
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD ECHO EVALUATE FLOAT HEADER INT L_EVALUATE MUL R_EVALUATE SEQUENCE STRING newline programme : statement  programme : statement newline programme  statement : declaration\n        | echo\n        | operation  echo : ECHO expression expression : INT\n        | FLOAT\n        | STRING\n        | EVALUATE \n        | operation  declaration : declare_int\n        | declare_float\n        | declare_string  declare_int : SEQUENCE '=' INT  declare_float : SEQUENCE '=' FLOAT  declare_string : SEQUENCE '=' STRING  operation : L_EVALUATE expression ADD expression R_EVALUATE\n        | L_EVALUATE expression MUL expression R_EVALUATE "
    
_lr_action_items = {'ECHO':([0,12,],[9,9,]),'L_EVALUATE':([0,9,10,12,22,23,],[10,10,10,10,10,10,]),'SEQUENCE':([0,12,],[11,11,]),'$end':([1,2,3,4,5,6,7,8,13,14,15,16,17,18,21,24,25,26,29,30,],[0,-1,-3,-4,-5,-12,-13,-14,-6,-7,-8,-9,-10,-11,-2,-15,-16,-17,-18,-19,]),'newline':([2,3,4,5,6,7,8,13,14,15,16,17,18,24,25,26,29,30,],[12,-3,-4,-5,-12,-13,-14,-6,-7,-8,-9,-10,-11,-15,-16,-17,-18,-19,]),'INT':([9,10,20,22,23,],[14,14,24,14,14,]),'FLOAT':([9,10,20,22,23,],[15,15,25,15,15,]),'STRING':([9,10,20,22,23,],[16,16,26,16,16,]),'EVALUATE':([9,10,22,23,],[17,17,17,17,]),'=':([11,],[20,]),'ADD':([14,15,16,17,18,19,29,30,],[-7,-8,-9,-10,-11,22,-18,-19,]),'MUL':([14,15,16,17,18,19,29,30,],[-7,-8,-9,-10,-11,23,-18,-19,]),'R_EVALUATE':([14,15,16,17,18,27,28,29,30,],[-7,-8,-9,-10,-11,29,30,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,],[1,21,]),'statement':([0,12,],[2,2,]),'declaration':([0,12,],[3,3,]),'echo':([0,12,],[4,4,]),'operation':([0,9,10,12,22,23,],[5,18,18,5,18,18,]),'declare_int':([0,12,],[6,6,]),'declare_float':([0,12,],[7,7,]),'declare_string':([0,12,],[8,8,]),'expression':([9,10,22,23,],[13,19,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser_bash.py',12),
  ('programme -> statement newline programme','programme',3,'p_programme_recursive','parser_bash.py',17),
  ('statement -> declaration','statement',1,'p_statement','parser_bash.py',22),
  ('statement -> echo','statement',1,'p_statement','parser_bash.py',23),
  ('statement -> operation','statement',1,'p_statement','parser_bash.py',24),
  ('echo -> ECHO expression','echo',2,'p_echo','parser_bash.py',29),
  ('expression -> INT','expression',1,'p_expression_num_or_var','parser_bash.py',34),
  ('expression -> FLOAT','expression',1,'p_expression_num_or_var','parser_bash.py',35),
  ('expression -> STRING','expression',1,'p_expression_num_or_var','parser_bash.py',36),
  ('expression -> EVALUATE','expression',1,'p_expression_num_or_var','parser_bash.py',37),
  ('expression -> operation','expression',1,'p_expression_num_or_var','parser_bash.py',38),
  ('declaration -> declare_int','declaration',1,'p_declaration','parser_bash.py',44),
  ('declaration -> declare_float','declaration',1,'p_declaration','parser_bash.py',45),
  ('declaration -> declare_string','declaration',1,'p_declaration','parser_bash.py',46),
  ('declare_int -> SEQUENCE = INT','declare_int',3,'p_declare_int','parser_bash.py',52),
  ('declare_float -> SEQUENCE = FLOAT','declare_float',3,'p_declare_float','parser_bash.py',57),
  ('declare_string -> SEQUENCE = STRING','declare_string',3,'p_declare_string','parser_bash.py',62),
  ('operation -> L_EVALUATE expression ADD expression R_EVALUATE','operation',5,'p_operation','parser_bash.py',66),
  ('operation -> L_EVALUATE expression MUL expression R_EVALUATE','operation',5,'p_operation','parser_bash.py',67),
]
